generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model invoice {
  id            Int           @id @default(autoincrement())
  number        String        @unique(map: "Invoice_number_key")
  date          DateTime      @default(now())
  dueDate       DateTime
  clientName    String
  clientEmail   String?
  clientAddress String?
  subtotal      Float         @db.Float
  discount      Float         @default(0) @db.Float
  total         Float         @db.Float
  status        String        @default("PENDING")
  quoteId       Int?          @unique(map: "Invoice_quoteId_key")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  paidAt        DateTime?     @db.DateTime(0)
  quote         quote?        @relation(fields: [quoteId], references: [id], map: "Invoice_quoteId_fkey")
  invoiceitem   invoiceitem[]
}

model invoiceitem {
  id        Int      @id @default(autoincrement())
  invoiceId Int
  productId Int
  quantity  Int
  unitPrice Float    @db.Float
  total     Float    @db.Float
  createdAt DateTime @default(now())
  updatedAt DateTime
  invoice   invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade, map: "InvoiceItem_invoiceId_fkey")
  product   product  @relation(fields: [productId], references: [id], map: "InvoiceItem_productId_fkey")

  @@index([invoiceId], map: "InvoiceItem_invoiceId_fkey")
  @@index([productId], map: "InvoiceItem_productId_fkey")
}

model product {
  id             Int           @id @default(autoincrement())
  name           String
  quantity       Int
  entryDate      DateTime      @default(now())
  expirationDate DateTime?
  purchasePrice  Float
  salePrice      Float
  description    String?
  category       String?
  supplier       String?
  barcode        String?       @unique(map: "Product_barcode_key")
  minStock       Int?          @default(5)
  isActive       Boolean       @default(true)
  imageUrl       String?       @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  invoiceitem    invoiceitem[]
  quoteitem      quoteitem[]
}

model quote {
  id            Int         @id @default(autoincrement())
  number        String      @unique(map: "Quote_number_key")
  date          DateTime    @default(now())
  clientName    String
  clientEmail   String?
  clientAddress String?
  subtotal      Float       @db.Float
  discount      Float       @default(0) @db.Float
  total         Float       @db.Float
  status        String      @default("DRAFT")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  invoice       invoice?
  quoteitem     quoteitem[]
}

model quoteitem {
  id        Int      @id @default(autoincrement())
  quoteId   Int
  productId Int
  quantity  Int
  unitPrice Float    @db.Float
  total     Float    @db.Float
  createdAt DateTime @default(now())
  updatedAt DateTime
  product   product  @relation(fields: [productId], references: [id], map: "QuoteItem_productId_fkey")
  quote     quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade, map: "QuoteItem_quoteId_fkey")

  @@index([productId], map: "QuoteItem_productId_fkey")
  @@index([quoteId], map: "QuoteItem_quoteId_fkey")
}

model user {
  id        Int       @id @default(autoincrement())
  email     String    @unique(map: "User_email_key")
  password  String
  name      String
  role      user_role @default(ADMIN)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime
}

enum user_role {
  ADMIN
  SUPER_ADMIN
}
